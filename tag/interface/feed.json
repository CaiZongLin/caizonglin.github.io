{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lex Blog • All posts by \"interface\" tag",
    "description": "",
    "home_page_url": "https://caizonglin.github.io",
    "items": [
        {
            "id": "https://caizonglin.github.io/2023/01/31/Golang%E7%9A%84Interface-2/",
            "url": "https://caizonglin.github.io/2023/01/31/Golang%E7%9A%84Interface-2/",
            "title": "Golang的Interface(2)",
            "date_published": "2023-01-31T05:50:26.000Z",
            "content_html": "<p><span id=\"0\"> <img data-src=\"https://i.imgur.com/K0jOddb.png\" alt=\" \"> </span></p>\n<h2 id=\"Interface-繼承\"><a href=\"#Interface-繼承\" class=\"headerlink\" title=\"Interface 繼承\"></a>Interface 繼承</h2><p>一個自定義型態是可以實現多個 interface 的。此外，interface 也可以繼承別的 interface 的行為，用下面來舉例:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Eat()</span><br><span class=\"line\">    Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span></span> Eat() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%s is eating\\n&quot;</span>, d.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span></span> Run() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%s is running\\n&quot;</span>, d.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoEat</span><span class=\"params\">(animal Animal)</span></span> &#123;</span><br><span class=\"line\">    animal.Eat()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoRun</span><span class=\"params\">(animal Animal)</span></span> &#123;</span><br><span class=\"line\">    animal.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dog := Dog&#123;Name:<span class=\"string\">&quot;Jason&quot;</span>&#125;</span><br><span class=\"line\">    GoEat(&amp;dog)</span><br><span class=\"line\">    GoRun(&amp;dog)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>先簡單複習一下，這邊建立了一個Animal 型態的接口，並定義了Eat() &amp;&amp; Run() 來表達動物都會擁有的行為。</li>\n<li>建立Dog struct 並且實作了接口內的 Eat() &amp;&amp; Run()。 這邊要注意，在實作時需要用指標 <em><strong>(d *Dog)</strong></em> 否則會導致淺複製的行為，並不是操作同一個Struct。</li>\n<li>建立GoEat() &amp;&amp; GoRun()，並將參數型態用Animal</li>\n</ol>\n<p>接下來是繼承的部分:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Eater <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Eat()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Runner <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Eater</span><br><span class=\"line\">    Runner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span></span> Eat() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%s is eating\\n&quot;</span>, d.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span></span> Run() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%s is running\\n&quot;</span>, d.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoEat</span><span class=\"params\">(animal Animal)</span></span> &#123;</span><br><span class=\"line\">    animal.Eat()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoRun</span><span class=\"params\">(animal Animal)</span></span> &#123;</span><br><span class=\"line\">    animal.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoEat2</span><span class=\"params\">(eater Eater)</span></span> &#123;</span><br><span class=\"line\">    eater.Eat()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GoRun2</span><span class=\"params\">(runner Runner)</span></span> &#123;</span><br><span class=\"line\">    runner.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dog := Dog&#123;Name:<span class=\"string\">&quot;Kenny&quot;</span>&#125;</span><br><span class=\"line\">    GoEat(&amp;dog)</span><br><span class=\"line\">    GoRun(&amp;dog)</span><br><span class=\"line\">    GoEat2(&amp;dog)</span><br><span class=\"line\">    GoRun2(&amp;dog)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 Animal interface 透過<code>內嵌</code>的方式，將 Eater、Runner 接口定義的行為放進去。這樣Dog Struct必須實作 Eat() &amp;&amp; Run() 才能算是Animal的一種。代表Dog Struct 也是Eater 及 Runner的一種。<br>所以後面定義的GoEat2() &amp;&amp; GoRun2()也可以接受Dog Struct</p>\n</blockquote>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><ul>\n<li><p>Golang Interface 重點是 <strong>行為</strong>，不管定義的介面型態是什麼，只要行為符合就屬於該介面型態的一種。(鴨子型別 <em>Duck typing</em>)</p>\n</li>\n<li><p>利用 Interface 可實現泛型、多型的功能，從而可以調用同一個函數名的函數但實現完全不同的功能。</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"#0\">點此回到頁首</a></p>\n",
            "tags": [
                "Interface"
            ]
        },
        {
            "id": "https://caizonglin.github.io/2023/01/31/Golang%E7%9A%84Interface-1/",
            "url": "https://caizonglin.github.io/2023/01/31/Golang%E7%9A%84Interface-1/",
            "title": "Golang的Interface(1)",
            "date_published": "2023-01-31T02:40:54.000Z",
            "content_html": "<p><span id=\"0\"> <img data-src=\"https://i.imgur.com/K0jOddb.png\" alt=\" \"> </span></p>\n<p>interface 在這裡有兩個意思</p>\n<ul>\n<li>一個代表『泛用型別』</li>\n<li>一個代表類似傳統 OOP(Object-oriented programming)</li>\n</ul>\n<p>讓我們簡單的介紹一下。</p>\n<h2 id=\"Interface-為泛用型別-任意值\"><a href=\"#Interface-為泛用型別-任意值\" class=\"headerlink\" title=\"Interface 為泛用型別(任意值)\"></a>Interface 為泛用型別(任意值)</h2><p>有些時候你可能會看見像下面這樣的 Interface。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ABC</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這種時候的 <strong>interface{}</strong> 意味著可以填入任何型態的值。比如 <em>int</em>, <em>string</em> , 或是 <em>struct</em> 等皆可以，這會讓程式比較富有彈性。</p>\n<h3 id=\"型態斷言\"><a href=\"#型態斷言\" class=\"headerlink\" title=\"型態斷言\"></a>型態斷言</h3><p>但凡事有利必有弊，因為傳入的值可以是任何型態，這時候就需要透過 <strong>型態斷言(Type Assertion)</strong> 來宣告 <strong>Interface{}</strong> 的真正型態，才可以在後續做應用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ABC</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 透過型態斷言判斷 interface&#123;&#125; 真正的型態。</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> v := value.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 是string型態。</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">string</span>:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;value 型態是字串，內容是 %s \\n&quot;</span> + v)</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 是 int 型態。</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">int</span>:</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;value 型態是int，乘以10就是 %d\\n&quot;</span>, v * <span class=\"number\">10</span> )</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;value 變數型態為%T\\n&quot;</span>, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"型態宣告\"><a href=\"#型態宣告\" class=\"headerlink\" title=\"型態宣告\"></a>型態宣告</h3><p>如果你很確定地知道 <strong>interface{}</strong> 是什麼型態，可以直接透過 <em>value.(型態)</em> 進行宣告。<br>但請注意，若型態不正確，則會發生 <em>panic</em>；所以最好的方式還是加上Golang自帶的<em>ok</em>功能來判斷</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> dog, ok := value.(<span class=\"type\">int</span>); ok &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> car, ok := value.(<span class=\"type\">string</span>); ok &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Interface-為介面定義\"><a href=\"#Interface-為介面定義\" class=\"headerlink\" title=\"Interface 為介面定義\"></a>Interface 為介面定義</h2><p>這裡的介面指的是Interface，也就是俗稱的 <strong>「接口」</strong> 。 你可以透過Interface 定義一個接口並讓別人加以實作，下面看一下範例</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>假設你需要定義一個資料庫接口，支援寫入和讀取的功能；但因為業務需求，會同時使用兩種資料庫，而你不想把它寫死城僅支援某一種資料庫時，就可以使用 <strong>Interface</strong> 定義一個接口，如下所示。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Database 是一個介面定義，用來讓第三方開發者定義自己的資料庫使用方式，就像一種規範。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Database <span class=\"keyword\">interface</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Read 從資料庫中讀取內容。</span></span><br><span class=\"line\">    Read()</span><br><span class=\"line\">    <span class=\"comment\">// Write 將內容寫入至資料庫。</span></span><br><span class=\"line\">    Write()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這表示現在我們可以遵循 <strong>Databease</strong> 這個Interface，開始支援更多的資料庫。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MySQL 會實作 Database 介面。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MySQL <span class=\"keyword\">struct</span> &#123;&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MySQL)</span></span> Read() &#123;&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MySQL)</span></span> Write() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Redis 會實作 Database 介面。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Redis <span class=\"keyword\">struct</span> &#123;&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r Redis)</span></span> Read() &#123;&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r Redis)</span></span> Write() &#123;&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>現在，我們只需要將 <em>MySQL</em> 或 <em>Redis</em> 傳入 <strong>New()</strong> 函式內，就會被實作成 <strong>Database</strong> 介面，就可以對資料庫進行讀取以及寫入的動作了!</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// New 會將接收到的物件以 Database 實作，並且呼叫相關函式對資料庫進行操作。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(db Database)</span></span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 讀取資料庫。</span></span><br><span class=\"line\">    db.Read()</span><br><span class=\"line\">    <span class=\"comment\">// 寫入資料庫。</span></span><br><span class=\"line\">    db.Write()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 將建構體傳入 New 就會被實作成 Database。</span></span><br><span class=\"line\">New(MySQL&#123;&#125;)  </span><br><span class=\"line\">New(Redis&#123;&#125;)  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"實作條件\"><a href=\"#實作條件\" class=\"headerlink\" title=\"實作條件\"></a>實作條件</h3><p>實作 Interface 的時候有件事情要注意，那就是欲實作的<strong>Struct</strong>必須要有 Interface 所定義的所有函式包含<em>接收參數</em>、<em>回傳值</em>，否則 Golang 會表明無法實作該 Interface 因為缺少某某條件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Database <span class=\"keyword\">interface</span> &#123;  </span><br><span class=\"line\">    Read(<span class=\"type\">string</span>) <span class=\"type\">string</span></span><br><span class=\"line\">    Write(<span class=\"type\">string</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上例，Read 一定要接收一個字串，並回傳一個字串、Write必須接收一個字串。</p>\n<p>Golang 也允許你在定義接口時擺上參數名稱好讓你辨認參數的作用，且實作時你可以不需要遵循此參數名稱。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Database <span class=\"keyword\">interface</span> &#123;  </span><br><span class=\"line\">    Read(name <span class=\"type\">string</span>) <span class=\"type\">string</span></span><br><span class=\"line\">    Write(data <span class=\"type\">string</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><a href=\"#0\">點此回到頁首</a></p>\n",
            "tags": [
                "Interface"
            ]
        }
    ]
}